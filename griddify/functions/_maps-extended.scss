// https://github.com/at-import/Sassy-Maps/


$private-sassy-maps-suppress-warnings: false !default;


/**
 * map-get-deep
 * given a map and a list of keys, find the value at the given key
 * https://github.com/at-import/Sassy-Maps/blob/0.x.x/sass/sassy-maps/_map-get.scss
 */
@function map-get-deep($map, $keys...) {
	@if length($keys) == 1 {
		$keys: nth($keys, 1);
	}
	$warn: "#{nth($keys, 1)}";
	$length: length($keys);
	$get: map-get($map, nth($keys, 1));

	@if $length > 1 {
		@for $i from 2 through $length {
			@if $get != null and type-of($get) == 'map' {
				$warn: $warn + "->#{nth($keys, $i)}";
				$get: map-get($get, nth($keys, $i));

				@if $get == null {
					@return map-get-deep-warning($warn, $get, nth($keys, $i));
				}
			}
			@else {
				@return map-get-deep-warning($warn, $get, nth($keys, $i));
			}
		}
	}

	@return $get;
}


/**
 * map-get-deep-warning
 * displays a warning if the retrieved value is `null`
 * https://github.com/at-import/Sassy-Maps/blob/0.x.x/sass/sassy-maps/_map-get.scss
 */
@function map-get-deep-warning($warn, $get, $key) {
	@if not $private-sassy-maps-suppress-warnings {
		@if $get == null {
			@warn "Map has no value for key search `#{$warn}`";
		}
		@else if type-of($get) != 'map' {
			@warn "Non-map value found for key search `#{$warn}`, cannot search for key `#{$key}`";
		}
	}
	@return null;
}


/**
 * get-keys
 * https://github.com/at-import/Sassy-Maps/blob/0.x.x/sass/sassy-maps/_map-set.scss
 */
@function get-keys($keys, $counter) {
	$return: ();
	@for $i from 1 to $counter {
		$return: append($return, nth($keys, $i));
	}
	@return $return;
}


/**
 * map-set
 * https://github.com/at-import/Sassy-Maps/blob/0.x.x/sass/sassy-maps/_map-set.scss
 */
@function map-set($map, $key, $value) {
	@return map-merge($map, ($key: $value));
}


/**
 * map-set-deep
 * https://github.com/at-import/Sassy-Maps/blob/0.x.x/sass/sassy-maps/_map-set.scss
 */
@function map-set-deep($map, $keys, $value) {
	$private-sassy-maps-suppress-warnings: true !global;
	$length: length($keys);
	$get-keys: ();
	$map-level: ();


	@if $length > 1 {
		$get-keys: get-keys($keys, $length);
		$map-level: map-get-deep($map, $get-keys);
	}
	$merge: (nth($keys, $length): $value);
	@if $map-level {
		$merge: map-merge($map-level, $merge);
	}
	@for $i from ($length * -1 + 1) through -1 {
		$j: abs($i);
		$key: nth($keys, $j);
		//
		// @debug $get-keys;
		@if $j > 1 {
			$get-keys: get-keys($keys, $j);
			$map-level: map-get-deep($map, $get-keys);
			@if $map-level {
				$merge: map-merge($map-level, ($key: $merge));
			}
			@else {
				$merge: ($key: $merge);
			}
		}
		@else {
			$merge: ($key: $merge);
		}
	}
	$map: map-merge($map, $merge);

	$private-sassy-maps-suppress-warnings: false !global;
	@return $map;
}


/**
 * map-to-string
 * https://github.com/at-import/Sassy-Maps/blob/0.x.x/sass/sassy-maps/_map-to-string.scss
 */
@function map-to-string($map) {
	@return inspect($map);
}


/**
 * map-merge-deep
 * https://github.com/Undistraction/bass/blob/master/sass/bass/functions/_bass.functions.maps.scss
 */
@function map-merge-deep($map-old, $map-new, $overwrite: true) {
	// Iterate through each value of the new map
	@each $key, $new-value in $map-new {
		// Check if that value already exists on the old map
		@if map-has-key($map-old, $key) {
			// There is an existing key
			$old-value: map-get($map-old, $key);
			@if type-of($new-value) == map and type-of($old-value) == map {
				// If both are maps, recurse regardless of $overwrite
				$merged-value: map-merge-deep($old-value, $new-value);
				$map-old: map-set($map-old, $key, $merged-value);
			}@else{
				// Otherwise check $overwrite
				@if $overwrite{
					$map-old: map-set($map-old, $key, $new-value);
				}
			}
		}@else{
			// There is no existing key so add
			$map-old: map-set($map-old, $key, $new-value);
		}
	}
	@return $map-old;
}
